#ifndef LATEX_LANGUAGE_SERVER_STYLE_H
#define LATEX_LANGUAGE_SERVER_STYLE_H

#include <string>
#include <unordered_map>
#include <optional.h>
#include <rapidxml.hpp>

/*
 * Used to store all the expected entries, fields, field values, etc.
 *
 * It will be initialised by parsing the `.bcf` file, so it should
 * be fully compliant with whatever style the user has. It will also
 * offer several autogenerated templates for before that file is generated,
 * so it can start parsing immediately (and without the file if the user is
 * pathological and deletes it...)
 *
 * The file appears to completely specify the citation style (at least better
 * than the parsing approximations I originally used). I ran into weird things
 * with auto field conversions using that method, so hopefully we won't now.
 */

using std::string;
using std::u16string;
using std::unordered_map;

using namespace rapidxml;

namespace Style {

struct Constant {
};

struct Entry {
};

struct Field {
};

struct EntryField {
};

struct UniversalField {
};

struct UntypedField {
};

class Style {
    string name {};

    unordered_map<u16string, Constant> constants;

    unordered_map<u16string, Entry> entries;

    unordered_map<u16string, Field> fields;

    unordered_map<u16string, EntryField> entryFields;

    unordered_map<u16string, UniversalField> universalFields;

    unordered_map<u16string, UntypedField> untypedFields;

public:
    explicit Style (xml_document<> &doc);

    optional<Entry> getEntry (u16string &name);

    optional<Field> getField (u16string &name);

    void addEntry (Entry &&entry);

    void addField (Field &&field);
};

} // namespace Style

#endif //LATEX_LANGUAGE_SERVER_STYLE_H
